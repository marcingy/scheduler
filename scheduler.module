<?php

/**
 * @file
 * Enables users to schedule nodes for publication.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;

// The default format to use if no custom format has been configured.
const SCHEDULER_DATE_FORMAT = 'Y-m-d H:i:s';

/**
 * Implements hook_form_alter().
 */
function scheduler_form_node_form_alter(&$form, FormStateInterface $form_state) {
  $form['scheduler_settings'] = array(
    '#type' => 'details',
    '#title' => t('Scheduler settings'),
    '#open' => FALSE,
    '#group' => 'advanced',
    '#attributes' => array(
      'class' => array('scheduler-form'),
    ),
    '#attached' => array(
      'library' => array('scheduler/drupal.scheduler'),
    ),
    '#weight' => 30,
  );
  $form['publish_on']['#group'] = 'scheduler_settings';
  $form['unpublish_on']['#group'] = 'scheduler_settings';
}

/**
 * Implements hook_entity_base_field_info().
 */
function scheduler_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'node') {
    $fields['publish_on'] = BaseFieldDefinition::create('timestamp')
      ->setLabel(t('Publish on'))
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', array(
        'type' => 'datetime_timestamp_none',
        'weight' => 10,
      ))
      ->setDisplayConfigurable('form', TRUE)
      ->setSetting('unsigned', TRUE)
      ->setRevisionable(TRUE);

    $fields['unpublish_on'] = BaseFieldDefinition::create('timestamp')
      ->setLabel(t('Unpublish on'))
      ->setTranslatable(TRUE)
      ->setDisplayOptions('form', array(
        'type' => 'datetime_timestamp_none',
        'weight' => 10,
      ))
      ->setDisplayConfigurable('form', TRUE)
      ->setSetting('unsigned', TRUE)
      ->setRevisionable(TRUE);

    return $fields;
  }
}

/**
 * Grab a list of plugins for use by the scheduler.
 *
 * @return array
 *   Array of plugin instances.
 */
function scheduler_get_plugins() {
  static $plugins;
  if (!isset($plugins)) {
    $plugins_defintions = \Drupal::service('plugin.manager.scheduler.cron')->getDefinitions();
    $plugins = [];
    foreach ($plugins_defintions as $plugin => $definition) {
      $plugins[$plugin] = \Drupal::service('plugin.manager.scheduler.cron')->createInstance($plugin, array());
    }
  }

  return $plugins;
}

/**
 * Implements hook_cron().
 */
function scheduler_cron() {
  $plugins = scheduler_get_plugins();
  _scheduler_publish($plugins);
  _scheduler_unpublish($plugins);
}

/**
 * Publish scheduled nodes.
 *
 * @param array $plugins
 *   List of plugins to act against.
 */
function _scheduler_publish($plugins) {
  $nids = [];
  foreach ($plugins as $plugin) {
    $nids += $plugin->getPublishedNodes();
  }

  // Allow other modules to alter the list of nodes to be published.
  \Drupal::moduleHandler()->alter('scheduler_nid_list_publish', $nids);

  $nodes = entity_load_multiple('node', $nids);
  foreach ($nodes as $node) {
    // Check that other modules allow the action on this node.
    foreach ($plugins as $plugin) {
      if (!$plugin->allowPublishing($node)) {
        continue;
      }
    }

    // Perform tweaks to the node.
    foreach ($plugins as $plugin) {
      $plugin->prePublish($node);
    }

    // We always want this to happen.
    $node->set('publish_on', NULL);

    \Drupal::logger('scheduler')->notice('@type: scheduled publishing of %title.', array('@type' => $node->getType(), '%title' => $node->getTitle()), _l(t('view'), 'node/' . $node->id(), array('alias' => TRUE)));
    $action_manger = \Drupal::service('plugin.manager.action');
    $action = $action_manger->createInstance('node_publish_action');
    $action->execute($node);
    $action = $action_manger->createInstance('node_save_action');
    $action->execute($node);

    // Perform tweaks to the node.
    foreach ($plugins as $plugin) {
      $plugin->publish($node);
    }
  }
}

/**
 * Unpublish scheduled nodes.
 *
 * @param array $plugins
 *   List of plugins to act against.
 */
function _scheduler_unpublish($plugins) {
  $nids = [];
  foreach ($plugins as $plugin) {
    $nids += $plugin->getUnPublishedNodes();
  }

  \Drupal::moduleHandler()->alter('scheduler_nid_list_unpublish', $nids);

  $nodes = entity_load_multiple('node', $nids);
  foreach ($nodes as $node) {
    // Check that other modules allow the action on this node.
    foreach ($plugins as $plugin) {
      if (!$plugin->allowUnPublishing($node)) {
        continue;
      }
    }

    // Perform tweaks to the node.
    foreach ($plugins as $plugin) {
      $plugin->preUnPublish($node);
    }

    // We always want this to happen.
    $node->set('unpublish_on', NULL);

    \Drupal::logger('scheduler')->notice('@type: scheduled unpublishing of %title.', array('@type' => $node->getType(), '%title' => $node->getTitle()), _l(t('view'), 'node/' . $node->getId(), array('alias' => TRUE)));
    $action_manger = \Drupal::service('plugin.manager.action');
    $action = $action_manger->createInstance('node_unpublish_action');
    $action->execute($node);
    $action = $action_manger->createInstance('node_save_action');
    $action->execute($node);

    // Perform tweaks to the node.
    foreach ($plugins as $plugin) {
      $plugin->unPublish($node);
    }
  }
}

/**
 * Implements hook_node_validate().
 */
function scheduler_node_validate(\Drupal\node\NodeInterface $node, $form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $publish_on = $node->get('publish_on')->value;
  $config = \Drupal::config('scheduler.settings');
  if (!empty($publish_on)) {
    if ($config->get('publish_past_date_' . $node->getType(), FALSE) && $publish_on < REQUEST_TIME) {
      $form_state->setErrorByName('publish_on',t("The 'publish on' date must be in the future"));
    }
  }

  $unpublish_on = $node->get('unpublish_on')->value;
  if (!empty($unpublish_on) && $unpublish_on < REQUEST_TIME) {
    $form_state->setErrorByName('unpublish_on', t("The 'unpublish on' date must be in the future"));
  }

  if (!empty($unpublish_on) && !empty($publish_on) && $unpublish_on < $publish_on) {
    $form_state->setErrorByName('unpublish_on', t("The 'unpublish on' date must be later than the 'publish on' date."));
  }

  // The unpublish-on 'required' form attribute may not be set in some cases,
  // but a value must be entered if also setting a publish-on date.
  if ($config->get('unpublish_required_' . $node->getType(), FALSE) && empty($unpublish_on) && !empty($publish_on)) {
    $form_state->setErrorByName('unpublish_on', t("If you set a 'publish-on' date then you must also set an 'unpublish-on' date."));
  }
}

/**
 * Implements hook_node_presave().
 */
function scheduler_node_presave(\Drupal\node\NodeInterface $node) {
  $publish_on = $node->get('publish_on')->value;
  if (!empty($publish_on)) {
    $publication_allowed = TRUE;
    $plugins = scheduler_get_plugins();
    foreach ($plugins as $plugin) {
      if (!$plugin->allowPublishing($node)) {
        $publication_allowed = FALSE;
        break;
      }
    }

    $config = \Drupal::config('scheduler.settings');
    // Publish the node immediately if the publication date is in the past.
    if ($publication_allowed && $config->get('publish_past_date_' . $node->getType(), TRUE) && $publish_on <= REQUEST_TIME) {
      foreach ($plugins as $plugin) {
        $plugin->publishImmediately($node);
      }
      $node->set('publish_on', NULL);
      $node->setPublished(TRUE);
    }
    else {
      // Ensure the node is unpublished as it will be published by cron later.
      $node->setPublished(FALSE);

      // Only inform the user that the node is scheduled if publication has not
      // been prevented by other modules. Those modules have to display a
      // message themselves explaining why publication is denied.
      if ($publication_allowed) {
        $date_format = $config->get('date_format', SCHEDULER_DATE_FORMAT);
        drupal_set_message(t('This post is unpublished and will be published @publish_time.', array('@publish_time' => format_date($publish_on, 'custom', $date_format))), 'status', FALSE);
      }
    }
  }
}
